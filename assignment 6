# Assignment #06: NumPy Fundamentals - I
# Name: [shahzain]
# Objective:
# To practice array creation, manipulation, and mathematical operations using NumPy
# and understand how NumPy enhances performance compared to Python lists.

# ---------------------------------------------
# Importing the required library
# ---------------------------------------------
import numpy as np
import time

# ---------------------------------------------
# Part 1: Power of NumPy vs Python Lists
# ---------------------------------------------
print("----- Part 1: Power of NumPy vs Python Lists -----")

# Creating a list and NumPy array of 10,000 numbers
python_list = list(range(1, 10001))
numpy_array = np.arange(1, 10001)

# Measuring time for Python list multiplication
start_time = time.time()
python_result = [x * 5 for x in python_list]
python_time = time.time() - start_time

# Measuring time for NumPy array multiplication
start_time = time.time()
numpy_result = numpy_array * 5
numpy_time = time.time() - start_time

print(f"Time taken by Python list: {python_time:.6f} seconds")
print(f"Time taken by NumPy array: {numpy_time:.6f} seconds")

if numpy_time < python_time:
    print("NumPy is faster because it performs operations at C-level using vectorization.\n")
else:
    print("Python list is faster (rare case), but usually NumPy wins.\n")

# ---------------------------------------------
# Part 2: Array Creation and Data Types
# ---------------------------------------------
print("----- Part 2: Array Creation and Data Types -----")

# 1D array of integers from 1 to 10
arr1 = np.arange(1, 11)
print("1D Array (1 to 10):")
print(arr1)

# 2D array of size 3x3 with numbers from 1–9
arr2 = np.arange(1, 10).reshape(3, 3)
print("\n2D Array (3x3) with numbers 1–9:")
print(arr2)

# Displaying dimensions, shape, size, datatype, and item size
for i, arr in enumerate([arr1, arr2], start=1):
    print(f"\nArray {i} Info:")
    print("Dimensions:", arr.ndim)
    print("Shape:", arr.shape)
    print("Size:", arr.size)
    print("Data Type:", arr.dtype)
    print("Item size:", arr.itemsize, "bytes")

# 3x3 array of floats and convert into integers
arr3 = np.array([[1.2, 2.5, 3.8], [4.1, 5.6, 6.9], [7.3, 8.8, 9.0]])
print("\n3x3 Float Array:")
print(arr3)
int_arr3 = arr3.astype(int)
print("Converted to Integer Array:")
print(int_arr3, "\n")

# ---------------------------------------------
# Part 3: Array Creation Functions
# ---------------------------------------------
print("----- Part 3: Array Creation Functions -----")

# a) Zero matrix 4x4
zero_matrix = np.zeros((4, 4))
print("Zero Matrix (4x4):")
print(zero_matrix)

# b) One matrix 3x2
one_matrix = np.ones((3, 2))
print("\nOne Matrix (3x2):")
print(one_matrix)

# c) Identity matrix 5x5
identity_matrix = np.eye(5)
print("\nIdentity Matrix (5x5):")
print(identity_matrix)

# d) Constant value array (value 7)
const_array = np.full((3, 3), 7)
print("\nConstant Value Array (3x3) filled with 7:")
print(const_array)

# e) Random integer array (3x4) with values between 10 and 99
random_array = np.random.randint(10, 100, (3, 4))
print("\nRandom Integer Array (3x4) between 10 and 99:")
print(random_array)

# f) np.arange() from 5 to 50 with step 5, reshape to 3x3
arr_range = np.arange(5, 50, 5).reshape(3, 3)
print("\nArray from 5 to 50 with step 5 reshaped into (3x3):")
print(arr_range, "\n")

# ---------------------------------------------
# Part 4: Indexing and Slicing
# ---------------------------------------------
print("----- Part 4: Indexing and Slicing -----")

arr = np.array([[10, 20, 30, 40],
                [50, 60, 70, 80],
                [90, 100, 110, 120]])

print("Original Array:")
print(arr)

# Access element at 2nd row, 3rd column (should be 70)
print("\nElement at (2,3):", arr[1, 2])

# Slice first two rows and first three columns
print("\nFirst 2 rows and first 3 columns:")
print(arr[:2, :3])

# Last row
print("\nLast Row:")
print(arr[-1])

# Elements from 2nd column onwards
print("\nElements from 2nd column onwards:")
print(arr[:, 1:])

# All even elements only (flattened)
even_elements = arr[arr % 2 == 0]
print("\nAll Even Elements:")
print(even_elements)

print("\n----- END OF ASSIGNMENT -----")
